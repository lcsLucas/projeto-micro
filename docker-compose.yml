# docker-compose up -> cria os container e dá o start neles
# docker-compose down --rmi 'all' -> para todos os containers que estão em execução e remove eles e suas imagens
# docker-compose stop usuarios -> parar um serviço 
# docker-compose build --no-cache -> reconstrui os serviços
# docker-compose up --force-recreate --no-deps --build usuarios -> rebuild do serviço e subi-lo novamente, separados dos outros

# docker run -it --name micro-mongo -v ./data/mongodb:/data/db -p 27017:27017 -d mongo:4.4.3
# docker run -it --name micro-postgres -e "POSTGRES_PASSWORD=postgres123" -p 5432:5432 -v /data/postgresql:/var/lib/postgresql/data -d postgres

version: '3.3'
services: 
  mongo:
    image: mongo:4.4.3
    container_name: micro-mongo
    restart: always
    mem_limit: 2048m
    command: [--auth]
    networks: 
      - net-micro
    environment: 
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: root-db
    ports: 
      - 27017:27017
    volumes: 
      - ./data/mongodb:/data/db
  postgres:
    image: postgres:9.6.20-alpine
    container_name: micro-postgres
    restart: always
    mem_limit: 2048m
    networks: 
      - net-micro
    environment: 
      POSTGRES_PASSWORD: postgres123
    ports: 
      - 5432:5432
    volumes: 
      - ./data/postgresql:/var/lib/postgresql/data
  alunos:
    container_name: micro-alunos
    stdin_open: true
    tty: true
    build:
      context: .
      dockerfile: "./services/aluno/docker/Dockerfile.alunos"
    restart: always
    working_dir: /go/src/github.com/lcslucas/projeto-service/services/aluno/cmd
    depends_on:
      - mongo
      - postgres
    ports:
      - '8081:8081'
      - '9999:9999'
    links:
      - mongo
      - postgres
    networks:
      - net-micro
  exercicios:
    container_name: micro-exercicios
    stdin_open: true
    tty: true
    build: 
      context: .
      dockerfile: "./services/exercicio/docker/Dockerfile.exercicios"
    restart: always
    working_dir: /go/src/github.com/lcslucas/projeto-service/services/exercicio/cmd
    depends_on: 
      - mongo
      - postgres
    ports: 
      - '8082:8082'
      - '9998:9998'
    links:
      - mongo
      - postgres
    networks: 
      - net-micro
  provas:
    container_name: micro-provas
    stdin_open: true
    tty: true
    build: 
      context: .
      dockerfile: "./services/prova/docker/Dockerfile.provas"
    restart: always
    working_dir: /go/src/github.com/lcslucas/projeto-service/services/prova/cmd
    depends_on: 
      - mongo
      - postgres
    ports: 
      - '8083:8083'
      - '9997:9997'
    links:
      - mongo
      - postgres
    networks: 
      - net-micro
  api:
    stdin_open: true
    tty: true
    build: 
      context: .
      dockerfile: "./api/docker/Dockerfile.api"
    container_name: micro-api
    restart: always
    working_dir: /bin/projeto-service
    depends_on: 
      - alunos
      - exercicios
      - provas
    ports: 
      - '9000:9000'
    links: 
      - alunos
      - exercicios
      - provas
    networks: 
      - net-micro
  prometheus:
    image: prom/prometheus:v2.28.1
    container_name: micro-prometheus
    restart: always
    ports:
      - 9090:9090
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    links: 
      - api
      - alunos
      - exercicios
      - provas
    depends_on: 
      - api
      - alunos
      - exercicios
      - provas
    networks: 
      - net-micro
  grafana:
    image: "grafana/grafana:5.4.3"
    container_name: micro-grafana
    restart: always
    ports:
      - 3000:3000
    volumes: 
      - "./data/grafana:/var/lib/grafana:cached"
    depends_on: 
      - prometheus
    networks: 
      - net-micro
networks:
  net-micro:
    external: true